# Created with package:mono_repo v3.4.3
name: Dart Lint CI
on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * 0"
defaults:
  run:
    shell: bash
env:
  PUB_ENVIRONMENT: bot.github

jobs:
  job_001:
    name: mono_repo self validate
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: cedx/setup-dart@v2
        with:
          release-channel: stable
      - run: dart --version
      - uses: actions/checkout@v2
      - name: mono_repo self validate
        run: pub global activate mono_repo 3.4.3
      - name: mono_repo self validate
        run: pub global run mono_repo generate --validate
  job_002:
    name: "analyze_format; Dart dev; PKGS: functions_framework, functions_framework_builder, test/hello; `dartfmt -n --set-exit-if-changed .`, `dartanalyzer --fatal-infos .`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:dev;packages:functions_framework-functions_framework_builder-test/hello;commands:dartfmt-dartanalyzer_0"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:dev;packages:functions_framework-functions_framework_builder-test/hello
            os:ubuntu-latest;pub-cache-hosted;dart:dev
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: cedx/setup-dart@v2
        with:
          release-channel: dev
      - run: dart --version
      - uses: actions/checkout@v2
      - id: functions_framework_pub_upgrade
        name: "functions_framework; pub upgrade --no-precompile"
        working-directory: functions_framework
        run: pub upgrade --no-precompile
      - name: "functions_framework; dartfmt -n --set-exit-if-changed ."
        if: "always() && steps.functions_framework_pub_upgrade.conclusion == 'success'"
        working-directory: functions_framework
        run: dartfmt -n --set-exit-if-changed .
      - name: "functions_framework; dartanalyzer --fatal-infos ."
        if: "always() && steps.functions_framework_pub_upgrade.conclusion == 'success'"
        working-directory: functions_framework
        run: dartanalyzer --fatal-infos .
      - id: functions_framework_builder_pub_upgrade
        name: "functions_framework_builder; pub upgrade --no-precompile"
        working-directory: functions_framework_builder
        run: pub upgrade --no-precompile
      - name: "functions_framework_builder; dartfmt -n --set-exit-if-changed ."
        if: "always() && steps.functions_framework_builder_pub_upgrade.conclusion == 'success'"
        working-directory: functions_framework_builder
        run: dartfmt -n --set-exit-if-changed .
      - name: "functions_framework_builder; dartanalyzer --fatal-infos ."
        if: "always() && steps.functions_framework_builder_pub_upgrade.conclusion == 'success'"
        working-directory: functions_framework_builder
        run: dartanalyzer --fatal-infos .
      - id: test_hello_pub_upgrade
        name: "test/hello; pub upgrade --no-precompile"
        working-directory: test/hello
        run: pub upgrade --no-precompile
      - name: "test/hello; dartfmt -n --set-exit-if-changed ."
        if: "always() && steps.test_hello_pub_upgrade.conclusion == 'success'"
        working-directory: test/hello
        run: dartfmt -n --set-exit-if-changed .
      - name: "test/hello; dartanalyzer --fatal-infos ."
        if: "always() && steps.test_hello_pub_upgrade.conclusion == 'success'"
        working-directory: test/hello
        run: dartanalyzer --fatal-infos .
  job_003:
    name: "analyze_format; Dart 2.10.0; PKGS: functions_framework, functions_framework_builder, test/hello; `dartanalyzer .`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:2.10.0;packages:functions_framework-functions_framework_builder-test/hello;commands:dartanalyzer_1"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:2.10.0;packages:functions_framework-functions_framework_builder-test/hello
            os:ubuntu-latest;pub-cache-hosted;dart:2.10.0
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: cedx/setup-dart@v2
        with:
          release-channel: stable
          version: "2.10.0"
      - run: dart --version
      - uses: actions/checkout@v2
      - id: functions_framework_pub_upgrade
        name: "functions_framework; pub upgrade --no-precompile"
        working-directory: functions_framework
        run: pub upgrade --no-precompile
      - name: functions_framework; dartanalyzer .
        if: "always() && steps.functions_framework_pub_upgrade.conclusion == 'success'"
        working-directory: functions_framework
        run: dartanalyzer .
      - id: functions_framework_builder_pub_upgrade
        name: "functions_framework_builder; pub upgrade --no-precompile"
        working-directory: functions_framework_builder
        run: pub upgrade --no-precompile
      - name: functions_framework_builder; dartanalyzer .
        if: "always() && steps.functions_framework_builder_pub_upgrade.conclusion == 'success'"
        working-directory: functions_framework_builder
        run: dartanalyzer .
      - id: test_hello_pub_upgrade
        name: "test/hello; pub upgrade --no-precompile"
        working-directory: test/hello
        run: pub upgrade --no-precompile
      - name: test/hello; dartanalyzer .
        if: "always() && steps.test_hello_pub_upgrade.conclusion == 'success'"
        working-directory: test/hello
        run: dartanalyzer .
  job_004:
    name: Notify failure
    runs-on: ubuntu-latest
    if: "(github.event_name == 'push' || github.event_name == 'schedule') && failure()"
    steps:
      - run: |
          curl -H "Content-Type: application/json" -X POST -d \
            "{'text':'Build failed! ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'}" \
            "${CHAT_WEBHOOK_URL}"
        env:
          CHAT_WEBHOOK_URL: "${{ secrets.CHAT_WEBHOOK_URL }}"
    needs:
      - job_001
      - job_002
      - job_003
